{"version":3,"sources":["boxContent.js","inputBox.js","App.js","serviceWorker.js","index.js"],"names":["boxComponent","props","index","list","deleteHandler","react_default","a","createElement","key","className","onClick","inputBox","inputValue","clickHandler","changeHandler","type","value","name","onChange","e","App","state","todoList","event","target","_this","setState","data","preventDefault","concat","Object","toConsumableArray","clickDeleteHandler","valueList","newTodoList","filter","_this2","this","_this$state","src_inputBox","map","boxContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAYeA,eAVM,SAAAC,GAAS,IACpBC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,cACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAQC,EAAMM,UAAU,gBAChCJ,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMN,EAAcD,KAArC,QCmBSQ,EAxBE,SAAAV,GAAS,IAChBW,EAA4CX,EAA5CW,WAAYC,EAAgCZ,EAAhCY,aAAcC,EAAkBb,EAAlBa,cAClC,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEQ,KAAK,OACLC,MAAOJ,EACPK,KAAK,aACLC,SAAUJ,EACVL,UAAU,iBAEZJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEE,UAAU,gBACVC,QAAS,SAAAS,GAAC,OAAIN,EAAaM,EAAGP,KAFhC,mBCkDSQ,6MA3DbC,MAAQ,CACNC,SAAU,GACVV,WAAY,MAGdE,cAAgB,SAAAS,GAAS,IACfP,EAAUO,EAAMC,OAAhBR,MACRS,EAAKC,SAAS,CACZd,WAAYI,OAIhBH,aAAe,SAACU,EAAOI,GACrBJ,EAAMK,iBADwB,IAGtBN,EAAaG,EAAKJ,MAAlBC,SAERG,EAAKC,SAAS,CACZJ,SAAQ,GAAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAMR,GAAN,CAAgBK,IACxBf,WAAY,QAIhBoB,mBAAqB,SAAAC,GAAa,IAE1BC,EADeT,EAAKJ,MAAlBC,SACqBa,OAAO,SAAAhC,GAAI,OAAIA,IAAS8B,IAErDR,EAAKC,SAAS,CACZJ,SAAUY,6EAIL,IAAAE,EAAAC,KAAAC,EAC0BD,KAAKhB,MAA9BT,EADD0B,EACC1B,WAAYU,EADbgB,EACahB,SACpB,OACEjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAACgC,EAAD,CACE3B,WAAYA,EACZC,aAAcwB,KAAKxB,aACnBC,cAAeuB,KAAKvB,gBAEtBT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACZa,EAASkB,IAAI,SAACrC,EAAMD,GACnB,OACEG,EAAAC,EAAAC,cAACkC,EAAD,CACEtC,KAAMA,EACND,MAAOA,EACPE,cAAegC,EAAKJ,iCAjDpBU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7778d794.chunk.js","sourcesContent":["import React from \"react\";\n\nconst boxComponent = props => {\n  const { index, list, deleteHandler } = props;\n  return (\n    <div key={index + list} className=\"box--content\">\n      <p>{list}</p>\n      <button onClick={() => deleteHandler(list)}>X</button>\n    </div>\n  );\n};\n\nexport default boxComponent;\n","import React from \"react\";\n\nconst inputBox = props => {\n  const { inputValue, clickHandler, changeHandler } = props;\n  return (\n    <div>\n      <label>Todo list</label>\n      <br />\n      <input\n        type=\"text\"\n        value={inputValue}\n        name=\"inputValue\"\n        onChange={changeHandler}\n        className=\"custom-input\"\n      />\n      <br />\n      <button\n        className=\"custom-button\"\n        onClick={e => clickHandler(e, inputValue)}\n      >\n        Add Todo List\n      </button>\n    </div>\n  );\n};\n\nexport default inputBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./box.css\";\nimport BoxContent from \"./boxContent\";\nimport InputBox from \"./inputBox\";\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    inputValue: \"\"\n  };\n\n  changeHandler = event => {\n    const { value } = event.target;\n    this.setState({\n      inputValue: value\n    });\n  };\n\n  clickHandler = (event, data) => {\n    event.preventDefault();\n\n    const { todoList } = this.state;\n\n    this.setState({\n      todoList: [...todoList, data],\n      inputValue: \"\"\n    });\n  };\n  changeHandler;\n  clickDeleteHandler = valueList => {\n    const { todoList } = this.state;\n    const newTodoList = todoList.filter(list => list !== valueList);\n\n    this.setState({\n      todoList: newTodoList\n    });\n  };\n\n  render() {\n    const { inputValue, todoList } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <InputBox\n            inputValue={inputValue}\n            clickHandler={this.clickHandler}\n            changeHandler={this.changeHandler}\n          />\n          <div className=\"box--container\">\n            {todoList.map((list, index) => {\n              return (\n                <BoxContent\n                  list={list}\n                  index={index}\n                  deleteHandler={this.clickDeleteHandler}\n                />\n              );\n            })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}